'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

from problem3 import prime_factors


def triangle_number(n):
    return (1 + n) * n / 2


def count_divisors(n):
    pfs = prime_factors(n)
    size = max(pfs)
    factor_count = [0] * (size+1)
    for i in pfs:
        factor_count[i] += 1
    count = 1
    for i in factor_count:
        if i > 0:
            count *= (i + 1)
    return count


num_divisors = 0
n = 2
target = 500
count = 0
while num_divisors <= target:
    n += 1
    num_divisors = count_divisors(triangle_number(n))
    count += 1
    if count % 500 == 0:
        count = 1
        print n, num_divisors

print '==result=='
print triangle_number(n)
print num_divisors
