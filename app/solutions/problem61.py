'''
Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square      P4,n=n2     1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n-1)/2      1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n-1)        1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n-3)/2      1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n-2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

build graph (P_x is node value)
traverse the graph from every node, find cyclic, passing 6 nodes, having different P_x value
'''
from util import digits_2
from copy import deepcopy

def triangle(n):
    return n * (n + 1) / 2

def square(n):
    return n * n

def pentagonal(n):
    return n * (3 * n - 1 ) / 2

def hexagonal(n):
    return n * (2 * n - 1)

def heptagonal(n):
    return n * (5 * n - 3) / 2
    
def octagonal(n):
    return n * (3 * n - 2)

def P(x, n):
    if x == 3: return triangle(n)
    if x == 4: return square(n)
    if x == 5: return pentagonal(n)
    if x == 6: return hexagonal(n)
    if x == 7: return heptagonal(n)
    if x == 8: return octagonal(n)

def getFourDigitNumbers(x):
    fourDigitNumbers = {}
    n = 1
    while True:
        Pxn = P(x, n)
        lenP = digits_2(Pxn)
        if lenP == 4:
            front, end = getTwoParts(Pxn)
            if front not in fourDigitNumbers:
                fourDigitNumbers[front] = set([end])
            else:
                fourDigitNumbers[front].add(end)
        if lenP > 4: break
        n += 1
    return fourDigitNumbers

def getTwoParts(n):
    return n / 100, n % 100

def mergeTwoParts(front, end):
    return int(str(front) + str(end))

def solution():
    polygonalNumbers = {}
    for i in range(3, 9):
        polygonalNumbers['p'+str(i)] = getFourDigitNumbers(i)

    result = 0

    PIndex = ['p4', 'p5', 'p6', 'p7', 'p8']

    for front3, end3s in polygonalNumbers['p3'].items():
        for end3 in end3s:
            for x in PIndex:
                Q = deepcopy(PIndex)
                Q.remove(x)
                if end3 in polygonalNumbers[x]:
                    # print('found {0} in {1}'.format(mergeTwoParts(front3, end3), x))    
                    for end4 in polygonalNumbers[x][end3]:
                        for y in Q:
                            R = deepcopy(PIndex)
                            R.remove(x)
                            R.remove(y)
                            if end4 in polygonalNumbers[y]:
                                # print('found {0} in {1}'.format(mergeTwoParts(end3, end4), y))
                                for end5 in polygonalNumbers[y][end4]:
                                    for z in R:
                                        S = deepcopy(PIndex)
                                        S.remove(x)
                                        S.remove(y)
                                        S.remove(z)
                                        if end5 in polygonalNumbers[z]:
                                            # print('found {0} in {1}'.format(mergeTwoParts(end4, end5), z))
                                            for end6 in polygonalNumbers[z][end5]:
                                                for a in S:
                                                    T = deepcopy(PIndex)
                                                    T.remove(x)
                                                    T.remove(y)
                                                    T.remove(z)
                                                    T.remove(a)                                                    
                                                    if end6 in polygonalNumbers[a]:
                                                        # print('found {0} in {1}'.format(mergeTwoParts(end5, end6), a))
                                                        for end7 in polygonalNumbers[a][end6]:
                                                            for b in T:
                                                                if end7 in polygonalNumbers[b]:
                                                                    # print('found {0} in {1}'.format(mergeTwoParts(end6, end7), b))
                                                                    for end8 in polygonalNumbers[b][end7]:
                                                                        # print('p8 {0}'.format(mergeTwoParts(end7, end8)))
                                                                        if end8 == front3:
                                                                            print(mergeTwoParts(front3, end3), mergeTwoParts(end3, end4), mergeTwoParts(end4,end5), mergeTwoParts(end5,end6), mergeTwoParts(end6,end7), mergeTwoParts(end7,end8))
                                                                            result = mergeTwoParts(front3, end3)+mergeTwoParts(end3, end4)+mergeTwoParts(end4,end5)+mergeTwoParts(end5,end6)+mergeTwoParts(end6,end7)+mergeTwoParts(end7,end8)

    return result

if __name__ == '__main__':
    result = solution()
    print 'Result: ', result

